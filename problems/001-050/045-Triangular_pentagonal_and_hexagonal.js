/**
 * Problem 45 - Triangular, pentagonal, and hexagonal
 *
 * @see {@link https://projecteuler.net/problem=45}
 *
 * Problem 45 - Triangular, pentagonal, and hexagonal
 *
 * Triangle, pentagonal, and hexagonal numbers are generated by the following
 * formulae:
 *
 *    Triangle 	 	Tn=n(n+1)/2	   	1, 3,  6, 10, 15, ...
 *    Pentagonal 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
 *    Hexagonal	 	Hn=n(2n−1)	   	1, 6, 15, 28, 45, ...
 *
 * It can be verified that T285 = P165 = H143 = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 */

this.solve = function () {
  // Define Triangle, Pentagonal and Hexagonal functions
  // const T = n => n*(n+1)/2;    // ⟹  n² + n = 2T(n) ⟹  n² + n − 2T(n) = 0
  // const P = n => n*(3*n-1)/2;  // ⟹ 3n² − n = 2P(n) ⟹ 3n² − n − 2P(n) = 0
  const H = n => n*(2*n-1);       // ⟹ 2n² − n =  H(n) ⟹ 2n² − n −  H(n) = 0

  // Use quadratic formula for each function to define the reverse functions
  // ax² + bx + c = 0 ⟹ x = (−b ± sqrt(b² − 4ac)) / 2a
  const revT = Tn => (-1+Math.sqrt(1+8*Tn))/2;
  const revP = Pn => (1+Math.sqrt(1+24*Pn))/6;
  // const revH = Hn => (1+Math.sqrt(1+8*Hn))/4;

  // Finding the next triangle number greater than T285 that is also pentagonal
  // and hexagonal amounts to find the next hexagonal number which is greater
  // than H143 that is also triangular and pentagonal. The difference is that
  // it will require less computation than if we were to check every triangle
  // numbers since the hexagonal sequence is less dense than the other two.

  let n = 143;
  let next;
  while (!next && n++) {
    const x = H(n);
    if (Number.isInteger(revP(x)) && Number.isInteger(revT(x)))
      next = x;
  }

  return next;
}
